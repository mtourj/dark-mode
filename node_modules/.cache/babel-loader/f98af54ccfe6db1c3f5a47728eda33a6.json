{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Mohammad\\\\Documents\\\\GitHub\\\\dark-mode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nexport var useLocalStorage = function useLocalStorage(key, initialValue) {\n  var _useState = useState(function () {\n    var item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : initialValue;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1];\n\n  var setValue = function setValue(value) {\n    localStorage.setItem(key, JSON.stringify(value));\n    setStoredValue(value);\n  };\n\n  return [storedValue, setValue];\n};\nexport var useDarkMode = function useDarkMode() {\n  var _useLocalStorage = useLocalStorage('dark-mode', false),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      darkMode = _useLocalStorage2[0],\n      setDarkMode = _useLocalStorage2[1];\n\n  useEffect(function () {\n    var bodyClassList = document.querySelector('body').classList;\n\n    if (darkMode) {\n      // Add class dark-mode to body element\n      !bodyClassList.contains('dark-mode') && bodyClassList.add('dark-mode');\n    } else {\n      // Remove class dark-mode from body element\n      bodyClassList.contains('dark-mode') && bodyClassList.remove('dark-mode');\n    }\n  }, [darkMode]);\n  return [darkMode, setDarkMode];\n};","map":{"version":3,"sources":["C:\\Users\\Mohammad\\Documents\\GitHub\\dark-mode\\src\\hooks\\index.js"],"names":["useState","useEffect","useLocalStorage","key","initialValue","item","localStorage","getItem","JSON","parse","storedValue","setStoredValue","setValue","value","setItem","stringify","useDarkMode","darkMode","setDarkMode","bodyClassList","document","querySelector","classList","contains","add","remove"],"mappings":";AAAA,SAAUA,QAAV,EAAoBC,SAApB,QAAqC,OAArC;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,YAAN,EAAuB;AAAA,kBACdJ,QAAQ,CAAC,YAAM;AACnD,QAAMK,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,CAAb;AACA,WAAOE,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,GAAsBD,YAAjC;AACD,GAH6C,CADM;AAAA;AAAA,MAC7CM,WAD6C;AAAA,MAChCC,cADgC;;AAMpD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxBP,IAAAA,YAAY,CAACQ,OAAb,CAAqBX,GAArB,EAA0BK,IAAI,CAACO,SAAL,CAAeF,KAAf,CAA1B;AACAF,IAAAA,cAAc,CAACE,KAAD,CAAd;AACD,GAHD;;AAKA,SAAO,CAACH,WAAD,EAAcE,QAAd,CAAP;AACD,CAZM;AAcP,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,yBACCd,eAAe,CAAC,WAAD,EAAc,KAAd,CADhB;AAAA;AAAA,MACxBe,QADwB;AAAA,MACdC,WADc;;AAG/BjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMkB,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,EAA+BC,SAArD;;AAEA,QAAGL,QAAH,EAAa;AACX;AACA,OAACE,aAAa,CAACI,QAAd,CAAuB,WAAvB,CAAD,IAAwCJ,aAAa,CAACK,GAAd,CAAkB,WAAlB,CAAxC;AACD,KAHD,MAGO;AACL;AACAL,MAAAA,aAAa,CAACI,QAAd,CAAuB,WAAvB,KAAuCJ,aAAa,CAACM,MAAd,CAAqB,WAArB,CAAvC;AACD;AACF,GAVQ,EAUN,CAACR,QAAD,CAVM,CAAT;AAYA,SAAO,CAACA,QAAD,EAAWC,WAAX,CAAP;AACD,CAhBM","sourcesContent":["import {  useState, useEffect } from 'react';\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    const item = localStorage.getItem(key);\r\n    return item ? JSON.parse(item) : initialValue;\r\n  })\r\n\r\n  const setValue = value => {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n    setStoredValue(value);\r\n  }\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport const useDarkMode = () => {\r\n  const [darkMode, setDarkMode] = useLocalStorage('dark-mode', false);\r\n\r\n  useEffect(() => {\r\n    const bodyClassList = document.querySelector('body').classList;\r\n\r\n    if(darkMode) {\r\n      // Add class dark-mode to body element\r\n      !bodyClassList.contains('dark-mode') && bodyClassList.add('dark-mode');\r\n    } else {\r\n      // Remove class dark-mode from body element\r\n      bodyClassList.contains('dark-mode') && bodyClassList.remove('dark-mode');\r\n    }\r\n  }, [darkMode])\r\n\r\n  return [darkMode, setDarkMode];\r\n}"]},"metadata":{},"sourceType":"module"}